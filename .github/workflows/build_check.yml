name: Build Check

on:
  push:
    paths:
      - 'Client/**'
      - 'Server/**'
      - 'GameEngine/**'
      - 'CMakeLists.txt'
  pull_request:
    paths:
      - 'Client/**'
      - 'Server/**'
      - 'GameEngine/**'
      - 'CMakeLists.txt'
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: Windows Latest, os: windows-latest }
          - { name: Linux GCC,      os: ubuntu-latest }
          - { name: Linux Clang,    os: ubuntu-latest, flags: -DCMAKE_C_COMPILER=clang-16 -DCMAKE_CXX_COMPILER=clang++-16 }

    steps:
      - name: Install Boost on Windows
        if: runner.os == 'Windows'
        run: |
          Write-Host "Installing boost 1.84.0..." -ForegroundColor Cyan
          New-Item 'C:\Libraries' -ItemType Directory -Force
          Measure-Command {
              Write-Host "Installing boost 1.84.0..." -ForegroundColor Cyan

              Write-Host "Downloading x64..."
              $exePath = "$env:TEMP\boost_1_84_0-msvc-14.0-64.exe"
              (New-Object Net.WebClient).DownloadFile('https://sourceforge.net/projects/boost/files/boost-binaries/1.84.0/boost_1_84_0-msvc-14.0-64.exe/download', $exePath)

              Write-Host "Installing x64..."
              cmd /c start /wait "$exePath" /verysilent
              del $exePath

              [IO.Directory]::Move('C:\local\boost_1_84_0', 'C:\Libraries\boost_1_84_0')

              Remove-Item 'C:\local' -Force -Recurse

              Write-Host "Compressing..."

              compact /c /i /s:C:\Libraries\boost_1_84_0 | Out-Null
          }

          Write-Host "Boost libraries installed!" -ForegroundColor Green

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype6 libfreetype6-dev cmake clang-tidy

      - name: Install clang-format 16
        if: runner.os == 'Linux'
        shell: bash
        run: wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && sudo ./llvm.sh 16 && sudo apt install clang-16 clang-format-16 && if [ ! -e /usr/bin/clang-format ]; then sudo ln -s /usr/bin/clang-format-16 /usr/bin/clang-format; fi

      - name: Install Boost
        if: runner.os == 'Linux'
        run: sudo apt-get install -y libboost-all-dev

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure
        shell: bash
        run: cmake -S . -B build -DCMAKE_INSTALL_PREFIX=install ${{matrix.platform.flags}}

      - name: Build
        shell: bash
        run: cmake --build build --config Release

      - name: Install
        shell: bash
        run: cmake --install build --config Release
